/*
 * The MIT License
 *
 * Copyright 2017 Muhammed Imraan Shaikh.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package blackjackproject;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author m_shaikh
 */
public class BlackjackProjectDriver extends JFrame
{
    private static final long serialVersionUID = 1297545770008178021L;

    private static int playerWinNum = 0;
    private static int computerWinNum = 0;
    private static String pWins = String.valueOf(playerWinNum);
    private static String cWins = String.valueOf(computerWinNum);
    private ImageIcon mainIcon = new ImageIcon(getClass().getResource("images/icon.png"));

    /** Creates new form BlackjackProjectDriver */
    public BlackjackProjectDriver()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mainJPanel = new javax.swing.JPanel();
        startJButton = new javax.swing.JButton();
        helpJButton = new javax.swing.JButton();
        aboutJButton = new javax.swing.JButton();
        quitJButton = new javax.swing.JButton();
        pCard1 = new javax.swing.JLabel();
        pCard2 = new javax.swing.JLabel();
        pCard3 = new javax.swing.JLabel();
        pCard4 = new javax.swing.JLabel();
        playerWinsLabel = new javax.swing.JLabel();
        playerWins = new javax.swing.JLabel();
        computerWinsLabel = new javax.swing.JLabel();
        computerWins = new javax.swing.JLabel();
        computerCardJPanel = new javax.swing.JPanel();
        cCardLabel = new javax.swing.JLabel();
        cCard1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Blackjack");
        setIconImage(mainIcon.getImage());

        mainJPanel.setLayout(new java.awt.GridLayout(3, 0));

        startJButton.setText("Start Game");
        startJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startJButtonActionPerformed(evt);
            }
        });
        mainJPanel.add(startJButton);

        helpJButton.setText("Help");
        helpJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                helpJButtonActionPerformed(evt);
            }
        });
        mainJPanel.add(helpJButton);

        aboutJButton.setText("About");
        aboutJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutJButtonActionPerformed(evt);
            }
        });
        mainJPanel.add(aboutJButton);

        quitJButton.setText("Quit");
        quitJButton.setToolTipText("Quit Blackjack");
        quitJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitJButtonActionPerformed(evt);
            }
        });
        mainJPanel.add(quitJButton);

        pCard1.setMaximumSize(new java.awt.Dimension(250, 263));
        mainJPanel.add(pCard1);
        mainJPanel.add(pCard2);
        mainJPanel.add(pCard3);
        mainJPanel.add(pCard4);

        playerWinsLabel.setText("Player Wins: ");
        mainJPanel.add(playerWinsLabel);

        playerWins.setText(pWins);
        mainJPanel.add(playerWins);

        computerWinsLabel.setText("CPU Wins: ");
        mainJPanel.add(computerWinsLabel);

        computerWins.setText(cWins);
        mainJPanel.add(computerWins);

        cCardLabel.setText("Dealer's Card: ");

        javax.swing.GroupLayout computerCardJPanelLayout = new javax.swing.GroupLayout(computerCardJPanel);
        computerCardJPanel.setLayout(computerCardJPanelLayout);
        computerCardJPanelLayout.setHorizontalGroup(
            computerCardJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerCardJPanelLayout.createSequentialGroup()
                .addComponent(cCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(cCardLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        computerCardJPanelLayout.setVerticalGroup(
            computerCardJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerCardJPanelLayout.createSequentialGroup()
                .addComponent(cCardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cCard1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computerCardJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
            .addComponent(computerCardJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJButtonActionPerformed
    {//GEN-HEADEREND:event_quitJButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitJButtonActionPerformed

    private void helpJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_helpJButtonActionPerformed
    {//GEN-HEADEREND:event_helpJButtonActionPerformed
        String helpText =
          "INSTRUCTIONS: \n" +
          "Welcome to Blackjack(also known as 21)! The main objective of\n" +
          "this game is to get the closest to the number 21 without going\n" +
          "over. The player will be given two cards at the start of the\n" +
          "game. In addition, the dealer will also be given two cards.\n" +
          "The player will only know the dealer's first card. From this, \n" +
          "the player can get another card or stay with the cards they have.\n" +
          "All cards are worth their numeric value, with royals being worth\n" +
          "10 points, and ace being 1 or 11 depending on the situation.\n" +
          "Whoever has the closest total to 21 at the end wins the game!\n" +
          "Good Luck and Remember to have fun!\n";
        JOptionPane.showMessageDialog(rootPane, helpText);
    }//GEN-LAST:event_helpJButtonActionPerformed

    private void aboutJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutJButtonActionPerformed
    {//GEN-HEADEREND:event_aboutJButtonActionPerformed
        String aboutText =
          "Blackjack/21 Java Program created by Muhammed Imraan Shaikh.\n" +
          "This program is licensed under the MIT License. To learn more about this, go to\n" +
          "https://opensource.org/licenses/MIT for the full text of the license.\n" +
          "Main GUI Icon made by OpenIcons, released under the CC0 Public Domain License.\n" +
          "Main Card Images made by Byron Knoll, released in the public domain.\n";
        JOptionPane.showMessageDialog(rootPane, aboutText);
    }//GEN-LAST:event_aboutJButtonActionPerformed

    private void startJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startJButtonActionPerformed
    {//GEN-HEADEREND:event_startJButtonActionPerformed
        startGame();
    }//GEN-LAST:event_startJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the System look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If the system look and feel is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            UIManager.setLookAndFeel(
              UIManager.getSystemLookAndFeelClassName());
              //UIManager.getCrossPlatformLookAndFeelClassName());
        }
        catch ( ClassNotFoundException ex )
        {
            java.util.logging.Logger.getLogger(BlackjackProjectDriver.class.getName()).log(
              java.util.logging.Level.SEVERE, null, ex);
        }
        catch ( InstantiationException ex )
        {
            java.util.logging.Logger.getLogger(BlackjackProjectDriver.class.getName()).log(
              java.util.logging.Level.SEVERE, null, ex);
        }
        catch ( IllegalAccessException ex )
        {
            java.util.logging.Logger.getLogger(BlackjackProjectDriver.class.getName()).log(
              java.util.logging.Level.SEVERE, null, ex);
        }
        catch ( UnsupportedLookAndFeelException ex )
        {
            java.util.logging.Logger.getLogger(BlackjackProjectDriver.class.getName()).log(
              java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new BlackjackProjectDriver().setVisible(true);
            }
        });
    }

    public void startGame()
    {
        int cardHeight = 182, cardWidth = 125;
        int choice;
        String resultText = "";
        Deck cardDeck = new Deck();
        Hand playerHand = new Hand();
        Hand computerHand = new Hand();
        Image[] images = new Image[5];
        ImageIcon[] icons = new ImageIcon[5];

        clearCards();
        cardDeck.createDeck();

        computerHand.add(cardDeck.getCard());

        images[0] = computerHand.getCardImage().getImage().getScaledInstance(cardWidth, cardHeight, Image.SCALE_SMOOTH);
        icons[0]= new ImageIcon(images[0]);
        cCard1.setIcon(icons[0]);

        while(computerHand.totalValue() < 17)
        {
            computerHand.add(cardDeck.getCard());
        }

        playerHand.add(checkCard(cardDeck.getCard()));

        images[1] = playerHand.getCardImage().getImage().getScaledInstance(cardWidth, cardHeight, Image.SCALE_SMOOTH);
        icons[1] = new ImageIcon(images[1]);
        pCard1.setIcon(icons[1]);

        playerHand.add(checkCard(cardDeck.getCard()));

        images[2] = playerHand.getCardImage().getImage().getScaledInstance(cardWidth, cardHeight, Image.SCALE_SMOOTH);
        icons[2] = new ImageIcon(images[2]);
        pCard2.setIcon(icons[2]);

        do
        {
            Object[] options =
            {
                "Hit!",
                "Stay!"
            };
            choice = JOptionPane.showOptionDialog(rootPane,
              "Your total is: " + playerHand.totalValue() + " points.\nWould you like to hit or stay?",
              "Blackjack Game",
              JOptionPane.YES_NO_OPTION,
              JOptionPane.QUESTION_MESSAGE,
              null, options, options[0]);
            //yes = 0, no = 1
            if(choice == 0)
            {
                playerHand.add(checkCard(cardDeck.getCard()));
                if(pCard3.getIcon() == null)
                {
                    images[3] = playerHand.getCardImage().getImage().getScaledInstance(cardWidth, cardHeight, Image.SCALE_SMOOTH);
                    icons[3] = new ImageIcon(images[3]);
                    pCard3.setIcon(icons[3]);
                }
                else
                {
                    images[4] = playerHand.getCardImage().getImage().getScaledInstance(cardWidth, cardHeight, Image.SCALE_SMOOTH);
                    icons[4] = new ImageIcon(images[4]);
                    pCard4.setIcon(icons[4]);
                }
            }
        } while(choice == 0 && playerHand.totalValue() < 21);

        JOptionPane.showMessageDialog(rootPane, "Your Final Total: " + playerHand.totalValue() +
          " points.\nComputer's Final Total: " + computerHand.totalValue() + " points.");

        if(playerHand.totalValue() > 21)
        {
            resultText = "You have a BUST! The Dealer wins this round!";
            computerWinNum++;
        }
        else if(computerHand.totalValue() > 21)
        {
            resultText = "The Dealer has a BUST! You win this round!";
            playerWinNum++;
        }
        else if(playerHand.totalValue() <= 21 && computerHand.totalValue() < playerHand.totalValue())
        {
            resultText = "Your score was HIGHER! You win this round!";
            playerWinNum++;
        }
        else if(computerHand.totalValue() <= 21 && playerHand.totalValue() < computerHand.totalValue())
        {
            resultText = "Your score was LOWER! The Dealer wins this round!";
            computerWinNum++;
        }
        else if(playerHand.totalValue() == computerHand.totalValue())
        {
            resultText = "Its a PUSH! No one wins this round!";
        }
        pWins = String.valueOf(playerWinNum);
        cWins = String.valueOf(computerWinNum);
        playerWins.setText(pWins);
        computerWins.setText(cWins);
        JOptionPane.showMessageDialog(rootPane, resultText);
    }

    public Card checkCard(Card card)
    {
        if(card.getPointValue() == 1)
        {
            Object[] options =
            {
                "1 Point!",
                "11 Points!"
            };
            int ask = JOptionPane.showOptionDialog(rootPane,
              "You drew an Ace. Would you like it to be worth 1 or 11 points?",
              "Blackjack Game",
              JOptionPane.YES_NO_OPTION,
              JOptionPane.QUESTION_MESSAGE,
              null, options, options[0]);
            if(ask == 1)
                card.setPointValue(11);
            else
                card.setPointValue(1);
        }
        return card;
    }

    public void clearCards()
    {
        cCard1.setIcon(null);
        cCard1.revalidate();
        pCard1.setIcon(null);
        pCard1.revalidate();
        pCard2.setIcon(null);
        pCard2.revalidate();
        pCard3.setIcon(null);
        pCard3.revalidate();
        pCard4.setIcon(null);
        pCard4.revalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutJButton;
    private javax.swing.JLabel cCard1;
    private javax.swing.JLabel cCardLabel;
    private javax.swing.JPanel computerCardJPanel;
    private javax.swing.JLabel computerWins;
    private javax.swing.JLabel computerWinsLabel;
    private javax.swing.JButton helpJButton;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JLabel pCard1;
    private javax.swing.JLabel pCard2;
    private javax.swing.JLabel pCard3;
    private javax.swing.JLabel pCard4;
    private javax.swing.JLabel playerWins;
    private javax.swing.JLabel playerWinsLabel;
    private javax.swing.JButton quitJButton;
    private javax.swing.JButton startJButton;
    // End of variables declaration//GEN-END:variables
}
